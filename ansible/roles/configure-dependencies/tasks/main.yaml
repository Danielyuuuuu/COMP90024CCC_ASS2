---
# - name: Update and upgrade apt packages
#   become: true
#   apt:
#     upgrade: yes
#     update_cache: yes

# Install python
- name: Install pip
  become: yes
  apt:
    name: ['python3-pip']
    state: latest
    update_cache: yes

#  # Install python
# - name: Install pip
#   become: yes
#   apt:
#     name: ['python3-venv']
#     state: latest
#     update_cache: yes   

# # Install python
# - name: Install pip
#   become: yes
#   apt:
#     name: ['python3-dev']
#     state: latest
#     update_cache: yes

# Update python
- name: Update pip
  become: yes
  pip:
    name: ['pip']
    state: latest

# Install couchdb
- name: Install couchdb
  become: yes
  pip:
    name: ['couchdb']
    state: latest

# # Install docker
# - name: Install docker
#   become: yes
#   apt:
#     name: ['docker']
#     state:  latest

# - name: Install docker.io
#   become: yes
#   apt:
#     name: ['docker.io']
#     state: latest

# - name: Install docker-compose
#   become: yes
#   apt:
#     name: ['docker-compose']
#     state: latest


# Install pandas
- name: Install pandas
  become: yes
  pip:
    name: ['pandas']
    state: latest

# Install numpy
- name: Install numpy
  become: yes
  pip:
    name: ['numpy']
    state: latest

# Install scikit-learn
- name: Install scikit-learn
  become: yes
  pip:
    name: ['scikit-learn']
    state: latest

# Install nltk
- name: Install nltk
  become: yes
  pip:
    name: ['nltk']
    state: latest

# Install gensim
- name: Install gensim
  become: yes
  pip:
    name: ['gensim']
    state: latest

# Install geopandas
- name: Install geopandas
  become: yes
  pip:
    name: ['geopandas']
    state: latest

# Install folium
- name: Install folium
  become: yes
  pip:
    name: ['folium']
    state: latest

# Install tensorflow
- name: Install tensorflow
  become: yes
  pip:
    name: ['tensorflow==2.3.0']
    state: present


- name: Install git
  become: yes
  apt: 
    name: ['git']
    state: latest
    update_cache: yes

- name: Install p7zip
  become: yes
  apt:
    name: ['p7zip-full']
    state: latest
    update_cache: yes

# - name: Update apt and install package to allow apt to use a repository over HTTPS
#   shell: |
#     sudo apt-get update
#     sudo apt-get install \
#     apt-transport-https \
#     ca-certificates \
#     curl \
#     gnupg \
#     lsb-release

# - name: Add Docker’s official GPG key
#   shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# - name: Set up stable repository
#   shell: |
#     echo \
#     "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
#     $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# - name: Kill process
#     shell: sudo kill 21356

# - name: Uninstall old docker
#   shell: sudo apt-get remove docker docker.io containerd runc

# - name: Install docker
#   become: yes
#   apt:
#     name: ['docker-ce', 'docker-ce-cli', containerd.io]
#     state: latest
#     update_cache: yes

# - name: Create the docker group
#   shell: sudo groupadd docker

# - name: Add root to the docker group
#   become: yes
#   shell: |
#     sudo usermod -aG docker root
#     sudo usermod -aG docker ubuntu

# - name: Activate the changes to groups
#   become: yes
#   shell: newgrp docker 


# - name: install dependency
#   become: yes
#   apt:
#     name: "{{item}}"
#     state: present
#     update_cache: yes
#   loop:
#     - apt-transport-https
#     - ca-certificates
#     - curl
#     - gnupg-agent
#     - software-properties-common

# - name: add GPG key
#   become: yes
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: add docker repository to apt
#   become: yes
#   apt_repository:
#     repo: deb https://download.docker.com/linux/ubuntu bionic stable
#     state: present

# - name: install docker
#   become: yes
#   apt:
#     name: "{{item}}"
#     state: latest
#     update_cache: yes
#   loop:
#     - docker-ce
#     - docker-ce-cli
#     - containerd.io
#     - docker-compose

# - name: Check if docker has started
#   become: yes
#   service:
#     name: docker
#     state: started
#     enabled: yes

# - name: Create the docker group
#   shell: sudo groupadd docker

# - name: Add root to the docker group
#   become: yes
#   shell: |
#     sudo usermod -aG docker root
#     sudo usermod -aG docker ubuntu

# - name: Uninstall old versions of docker
#   become: yes
#   shell: sudo apt-get remove docker docker-engine docker.io containerd runc

# - name: Uninstall old versions of docker
#   become: yes
#   apt:
#     pkg: ['docker', 'docker-engine', 'docker.io', 'containerd', 'runc']
#     state: absent
#   sudo: yes

# - name: Set up the repository
#   become: yes
#   shell: sudo apt-get install \
#     apt-transport-https \
#     ca-certificates \
#     curl \
#     gnupg \
#     lsb-release

- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    update_cache: yes

- name: Set up the repository
  become: yes
  apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release']
    state: latest
    update_cache: yes

# - name: Add Docker’s official GPG key
#   become: yes
#   get_url:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     dest: /usr/share/keyrings/docker-archive-keyring.gpg

# - name: Add Docker's official apt key.
#   become: yes
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
#     state: present
#     update_cache: yes
#   register: add_key
#   ignore_errors: true

# - name: Add Docker GPG key
#   become: yes
#   apt_key: url=https://download.docker.com/linux/ubuntu/gpg

- name: Add Docker GPG key
  become: yes
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  async: 45
  ignore_errors: yes

# - name: Add Docker apt key if failed
#   shell: "curl -sSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
#   args:
#     warn: no
#   when: add_key|failed  

# - name: Add Docker’s official GPG key
#   become: yes
#   shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
#   args:
#     warn: no
#   when: add_key|failed  

# - name: 
#   become: yes
#   shell: sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

- name: Set up the stable repository
  become: yes
  shell: |
    echo \
    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# - name: sudo apt-get update
#   become: yes
#   shell: sudo apt-get update


# - name: Update and upgrade apt packages
#   become: true
#   apt:
#     upgrade: yes
#     # update_cache: yes

# - name: Install docker
#   become: yes
#   shell: sudo apt-get install docker-ce docker-ce-cli containerd.io

- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    update_cache: yes
    
# - name: Install python docker
#   become: yes
#   pip:  
#     name: ['docker']
#     state: latest

- name: Install docker
  become: yes
  apt:
    name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
    state: latest
    update_cache: yes

- name: Create docker proxy file
  shell: |
    sudo mkdir -p /etc/systemd/system/docker.service.d
    sudo touch /etc/systemd/system/docker.service.d/http-proxy.conf

- name: Add proxy to the instance
  become: yes
  copy:
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf
    content: |
      [Service]
      Environment="HTTP_PROXY=http://wwwproxy.unimelb.edu.au:8000/"
      Environment="HTTPS_PROXY=http://wwwproxy.unimelb.edu.au:8000/"
      Environment="NO_PROXY=localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au"
      Environment="http_proxy=http://wwwproxy.unimelb.edu.au:8000/"
      Environment="https_proxy=http://wwwproxy.unimelb.edu.au:8000/"


- name: Create another docker proxy file
  shell: |
    sudo mkdir -p /home/ubuntu/.docker
    sudo touch /home/ubuntu/.docker/config.json

- name: Add another proxy to the instance
  become: yes
  copy:
    dest: /home/ubuntu/.docker/config.json
    content: |
      {
        "proxies":
        {
          "default":
          {
            "httpProxy": "http://wwwproxy.unimelb.edu.au:8000/",
            "httpsProxy": "http://wwwproxy.unimelb.edu.au:8000/",
            "noProxy": "localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au"
          }
        }
      }

- name: Add root to the docker group
  become: yes
  shell: |
    sudo usermod -aG docker root
    sudo usermod -aG docker ubuntu

- name: Stop docker
  become: yes
  shell: sudo systemctl stop docker

- name: Reload docker daemon
  shell: sudo systemctl daemon-reload

- name: Start docker
  become: yes
  shell: sudo systemctl start docker

- name: Run docker hello-world
  become: yes
  shell: sudo docker run hello-world